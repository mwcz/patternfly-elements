{"version":3,"file":"pfe-number.js","sources":["../../node_modules/numeral/numeral.js","pfe-number.js"],"sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","/*\n * @license\n * Copyright 2019 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport PFElement from \"../pfelement/pfelement.js\";\nimport numeral from \"numeral\";\n\n// easy aliases for common format strings\nconst types = {\n  abbrev: \"0a\", // or 'approx'?\n  ordinal: \"0o\",\n  percent: \"0%\",\n  bytes: \"0[.][00] ib\",\n  e: \"0[.00]e+0\",\n  thousands: \"0,0[.][00]\"\n};\n\n// use thin spaces to separate thousands chunks\n// debugger;\nnumeral.locales.en.delimiters.thousands = \" \";\n\nclass PfeNumber extends PFElement {\n\n  get html() {\n    return `<style>:host{display:inline;white-space:nowrap}</style><span></span>`;\n  }\n  static get tag() {\n    return \"pfe-number\";\n  }\n\n  get styleUrl() {\n    return \"pfe-number.scss\";\n  }\n\n  get templateUrl() {\n    return \"pfe-number.html\";\n  }\n\n  static get observedAttributes() {\n    return [\"number\", \"format\", \"type\"];\n  }\n\n  constructor() {\n    super(PfeNumber);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.connected = true;\n\n    this._determineFormat();\n    this._setInitialNumber();\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    super.attributeChangedCallback(...arguments);\n    switch (attr) {\n      case \"type\":\n        this._determineFormat();\n        break;\n      case \"format\":\n        this._updateNumber(this.getAttribute(\"number\"), newVal);\n        break;\n      case \"number\":\n        this._updateNumber(newVal, this.getAttribute(\"format\"));\n    }\n  }\n\n  _setInitialNumber() {\n    const numberAttrDefined = !Number.isNaN(\n      parseFloat(this.getAttribute(\"number\"))\n    );\n    const numberContentDefined = !Number.isNaN(parseFloat(this.textContent));\n\n    if (numberAttrDefined) {\n      this.setAttribute(\"number\", this.getAttribute(\"number\"));\n    } else if (numberContentDefined) {\n      this.setAttribute(\"number\", this.textContent);\n    }\n  }\n\n  _determineFormat() {\n    let type = this.getAttribute(\"type\");\n\n    if (type && types[type]) {\n      this.setAttribute(\"format\", types[type]);\n    } else {\n      this.setAttribute(\"format\", this.getAttribute(\"format\") || \"0\");\n    }\n  }\n\n  _updateNumber(num, type) {\n    this.shadowRoot.querySelector(\"span\").textContent = this._format(num, type);\n  }\n\n  _format(num, type) {\n    return numeral(num).format(type);\n  }\n}\n\nPFElement.create(PfeNumber);\n"],"names":["this"],"mappings":"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"}